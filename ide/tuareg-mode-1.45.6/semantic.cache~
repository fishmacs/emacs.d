;; Object tuareg-mode-1.45.6/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "tuareg-mode-1.45.6/"
  :tables (list 
   (semanticdb-table "custom-tuareg.el"
    :major-mode 'emacs-lisp-mode
    :tags 'nil
    :file "custom-tuareg.el"
    )
   (semanticdb-table "append-tuareg.el"
    :major-mode 'emacs-lisp-mode
    :tags 'nil
    :file "append-tuareg.el"
    )
   (semanticdb-table "tuareg.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("cl" include nil nil [749 762]) ("easymenu" include nil nil [763 782]) ("tuareg-mode-version" variable (:constant-flag t :default-value "Tuareg Version 1.45.6") nil [784 1477]) ("tuareg-with-xemacs" variable (:constant-flag t :default-value (featurep (quote xemacs))) nil [1609 1657]) ("defalias" code nil nil [1788 1916]) ("if" code nil nil [1918 2206]) ("tuareg-with-caml-mode-p" variable (:default-value (condition-case nil (and (require (quote caml-types)) (require (quote caml-help))) (error nil))) nil [2351 2477]) ("custom" include nil nil [2710 2727]) ("defgroup" code nil nil [2729 2815]) ("tuareg-indent-leading-comments" variable (:user-visible-flag t :default-value t) nil [2830 2983]) ("tuareg-indent-comments" variable (:user-visible-flag t :default-value t) nil [2985 3108]) ("tuareg-comment-end-extra-indent" variable (:user-visible-flag t) nil [3110 3611]) ("tuareg-support-leading-star-comments" variable (:user-visible-flag t :default-value t) nil [3613 4075]) ("tuareg-leading-star-in-doc" variable (:user-visible-flag t) nil [4077 4262]) ("tuareg-default-indent" variable (:user-visible-flag t :default-value 2) nil [4289 4549]) ("tuareg-lazy-paren" variable (:user-visible-flag t) nil [4551 4674]) ("tuareg-support-camllight" variable (:user-visible-flag t) nil [4676 5016]) ("tuareg-support-metaocaml" variable (:user-visible-flag t) nil [5018 5283]) ("tuareg-let-always-indent" variable (:user-visible-flag t :default-value t) nil [5285 5593]) ("tuareg-|-extra-unindent" variable (:user-visible-flag t :default-value tuareg-default-indent) nil [5595 6435]) ("tuareg-class-indent" variable (:user-visible-flag t :default-value tuareg-default-indent) nil [6437 6577]) ("tuareg-sig-struct-align" variable (:user-visible-flag t :default-value t) nil [6579 6702]) ("tuareg-sig-struct-indent" variable (:user-visible-flag t :default-value tuareg-default-indent) nil [6704 6859]) ("tuareg-method-indent" variable (:user-visible-flag t :default-value tuareg-default-indent) nil [6861 7003]) ("tuareg-begin-indent" variable (:user-visible-flag t :default-value tuareg-default-indent) nil [7005 7145]) ("tuareg-for-while-indent" variable (:user-visible-flag t :default-value tuareg-default-indent) nil [7147 7300]) ("tuareg-do-indent" variable (:user-visible-flag t :default-value tuareg-default-indent) nil [7302 7436]) ("tuareg-fun-indent" variable (:user-visible-flag t :default-value tuareg-default-indent) nil [7438 7574]) ("tuareg-function-indent" variable (:user-visible-flag t :default-value tuareg-default-indent) nil [7576 7722]) ("tuareg-if-then-else-indent" variable (:user-visible-flag t :default-value tuareg-default-indent) nil [7724 7887]) ("tuareg-let-indent" variable (:user-visible-flag t :default-value tuareg-default-indent) nil [7889 8025]) ("tuareg-in-indent" variable (:user-visible-flag t :default-value tuareg-default-indent) nil [8027 8570]) ("tuareg-match-indent" variable (:user-visible-flag t :default-value tuareg-default-indent) nil [8572 8712]) ("tuareg-try-indent" variable (:user-visible-flag t :default-value tuareg-default-indent) nil [8714 8850]) ("tuareg-with-indent" variable (:user-visible-flag t :default-value tuareg-default-indent) nil [8852 8990]) ("tuareg-rule-indent" variable (:user-visible-flag t :default-value tuareg-default-indent) nil [8992 9130]) ("tuareg-parse-indent" variable (:user-visible-flag t :default-value tuareg-default-indent) nil [9132 9272]) ("tuareg-parser-indent" variable (:user-visible-flag t :default-value tuareg-default-indent) nil [9274 9416]) ("tuareg-type-indent" variable (:user-visible-flag t :default-value tuareg-default-indent) nil [9418 9556]) ("tuareg-val-indent" variable (:user-visible-flag t :default-value tuareg-default-indent) nil [9558 9694]) ("tuareg-use-abbrev-mode" variable (:user-visible-flag t :default-value t) nil [9761 10182]) ("tuareg-electric-indent" variable (:user-visible-flag t :default-value t) nil [10184 10433]) ("tuareg-electric-close-vector" variable (:user-visible-flag t :default-value t) nil [10435 10805]) ("tuareg-skip-after-eval-phrase" variable (:user-visible-flag t :default-value t) nil [10866 11029]) ("tuareg-interactive-read-only-input" variable (:user-visible-flag t) nil [11031 11178]) ("tuareg-interactive-echo-phrase" variable (:user-visible-flag t :default-value t) nil [11180 11351]) ("tuareg-interactive-input-font-lock" variable (:user-visible-flag t :default-value t) nil [11353 11490]) ("tuareg-interactive-output-font-lock" variable (:user-visible-flag t :default-value t) nil [11492 11632]) ("tuareg-interactive-error-font-lock" variable (:user-visible-flag t :default-value t) nil [11634 11772]) ("tuareg-display-buffer-on-eval" variable (:user-visible-flag t :default-value t) nil [11774 11915]) ("tuareg-manual-url" variable (:user-visible-flag t :default-value "http://pauillac.inria.fr/ocaml/htmlman/index.html") nil [11917 12068]) ("tuareg-browser" variable (:user-visible-flag t :default-value (quote tuareg-netscape-manual)) nil [12070 12307]) ("tuareg-library-path" variable (:user-visible-flag t :default-value "/usr/local/lib/ocaml/") nil [12309 12426]) ("tuareg-definitions-max-items" variable (:user-visible-flag t :default-value 30) nil [12428 12564]) ("tuareg-options-list" variable (:user-visible-flag t :default-value (quote (("Lazy parentheses indentation" quote tuareg-lazy-paren) ("Force indentation after `let'" quote tuareg-let-always-indent) "---" ("Automatic indentation of leading keywords" quote tuareg-use-abbrev-mode) ("Electric indentation of ), ] and }" quote tuareg-electric-indent) ("Electric matching of [| and {<" quote tuareg-electric-close-vector) "---" ("Indent body of comments" quote tuareg-indent-comments) ("Indent first line of comments" quote tuareg-indent-leading-comments) ("Leading-`*' comment style" quote tuareg-support-leading-star-comments)))) nil [12566 13206]) ("tuareg-interactive-options-list" variable (:user-visible-flag t :default-value (quote (("Skip phrase after evaluation" quote tuareg-skip-after-eval-phrase) ("Echo phrase in interactive buffer" quote tuareg-interactive-echo-phrase) "---" ("Font-lock interactive input" quote tuareg-interactive-input-font-lock) ("Font-lock interactive output" quote tuareg-interactive-output-font-lock) ("Font-lock interactive error" quote tuareg-interactive-error-font-lock) "---" ("Read only input" quote tuareg-interactive-read-only-input)))) nil [13208 13748]) ("tuareg-interactive-program" variable (:user-visible-flag t :default-value "ocaml") nil [13750 13860]) ("tuareg-use-syntax-ppss" variable (:constant-flag t :user-visible-flag t) nil [14146 14229]) ("defgroup" code nil nil [14231 14314]) ("tuareg-faces-inherit-p" variable (:constant-flag t :default-value (if (boundp (quote face-attribute-name-alist)) (assq :inherit face-attribute-name-alist))) nil [14316 14440]) ("tuareg-font-lock-governing-face" variable (:default-value (if tuareg-faces-inherit-p (quote ((t :inherit font-lock-keyword-face))) (quote ((((background light)) (:foreground "darkorange3" :bold t)) (t (:foreground "orange" :bold t)))))) nil [14442 14741]) ("tuareg-font-lock-governing-face" variable (:default-value (quote tuareg-font-lock-governing-face)) nil [14742 14817]) ("tuareg-font-lock-multistage-face" variable (:default-value (quote ((((background light)) (:foreground "darkblue" :background "lightgray" :bold t)) (t (:foreground "steelblue" :background "darkgray" :bold t))))) nil [14819 15093]) ("tuareg-font-lock-multistage-face" variable (:default-value (quote tuareg-font-lock-multistage-face)) nil [15094 15171]) ("tuareg-font-lock-operator-face" variable (:default-value (if tuareg-faces-inherit-p (quote ((t :inherit font-lock-keyword-face))) (quote ((((background light)) (:foreground "brown")) (t (:foreground "khaki")))))) nil [15173 15435]) ("tuareg-font-lock-operator-face" variable (:default-value (quote tuareg-font-lock-operator-face)) nil [15436 15509]) ("tuareg-font-lock-error-face" variable (:default-value (quote ((t (:foreground "yellow" :background "red" :bold t))))) nil [15511 15689]) ("tuareg-font-lock-error-face" variable (:default-value (quote tuareg-font-lock-error-face)) nil [15690 15757]) ("tuareg-font-lock-interactive-output-face" variable (:default-value (quote ((((background light)) (:foreground "blue4")) (t (:foreground "cyan"))))) nil [15759 15963]) ("tuareg-font-lock-interactive-output-face" variable (:default-value (quote tuareg-font-lock-interactive-output-face)) nil [15964 16057]) ("tuareg-font-lock-interactive-error-face" variable (:default-value (if tuareg-faces-inherit-p (quote ((t :inherit font-lock-warning-face))) (quote ((((background light)) (:foreground "red3")) (t (:foreground "red2")))))) nil [16059 16334]) ("tuareg-font-lock-interactive-error-face" variable (:default-value (quote tuareg-font-lock-interactive-error-face)) nil [16335 16426]) ("tuareg-leading-star-p" function nil nil [16559 16935]) ("tuareg-auto-fill-insert-leading-star" function (:arguments ("&optional" "leading-star")) nil [16937 17508]) ("tuareg-auto-fill-function" function nil nil [17510 17840]) ("tuareg-forward-char" function (:arguments ("&optional" "step")) nil [17842 17956]) ("tuareg-backward-char" function (:arguments ("&optional" "step")) nil [17958 18073]) ("tuareg-in-indentation-p" function nil nil [18075 18251]) ("tuareg-cache-stop" variable (:default-value (point-min)) nil [18253 18291]) ("make-variable-buffer-local" code nil nil [18292 18339]) ("tuareg-cache" variable nil nil [18340 18365]) ("make-variable-buffer-local" code nil nil [18366 18408]) ("tuareg-cache-local" variable nil nil [18409 18440]) ("make-variable-buffer-local" code nil nil [18441 18489]) ("tuareg-cache-last-local" variable nil nil [18490 18526]) ("make-variable-buffer-local" code nil nil [18527 18580]) ("tuareg-last-loc" variable (:default-value (cons nil nil)) nil [18581 18620]) ("if" code nil nil [18624 24899]) ("tuareg-false-=-p" function nil nil [24938 25125]) ("tuareg-at-phrase-break-p" function nil nil [25127 25360]) ("tuareg-assoc-indent" function (:arguments ("kwop" "&optional" "look-for-let-or-and")) nil [25362 25882]) ("tuareg-font-lock-symbols" variable nil nil [26034 26252]) ("tuareg-font-lock-symbols-alist" variable (:default-value (append (and (fboundp (quote make-char)) (fboundp (quote charsetp)) (charsetp (quote japanese-jisx0208)) (list (cons "fun" (make-char (quote japanese-jisx0208) 38 75)) (cons "sqrt" (make-char (quote japanese-jisx0208) 34 101)) (cons "not" (make-char (quote japanese-jisx0208) 34 76)) (cons "or" (make-char (quote japanese-jisx0208) 34 75)) (cons "||" (make-char (quote japanese-jisx0208) 34 75)) (cons "&&" (make-char (quote japanese-jisx0208) 34 74)) (cons "->" (make-char (quote japanese-jisx0208) 34 42)) (cons "=>" (make-char (quote japanese-jisx0208) 34 77)) (cons "<-" (make-char (quote japanese-jisx0208) 34 43)) (cons "<>" (make-char (quote japanese-jisx0208) 33 98)) (cons "==" (make-char (quote japanese-jisx0208) 34 97)) (cons ">=" (make-char (quote japanese-jisx0208) 33 102)) (cons "<=" (make-char (quote japanese-jisx0208) 33 101)) (cons "'a" (make-char (quote japanese-jisx0208) 38 65)) (cons "'b" (make-char (quote japanese-jisx0208) 38 66)) (cons "'c" (make-char (quote japanese-jisx0208) 38 67)) (cons "'d" (make-char (quote japanese-jisx0208) 38 68)))) (and (fboundp (quote decode-char)) (list (cons "fun" (decode-char (quote ucs) 955)) (cons "sqrt" (decode-char (quote ucs) 8730)) (cons "not" (decode-char (quote ucs) 172)) (cons "or" (decode-char (quote ucs) 8897)) (cons "&&" (decode-char (quote ucs) 8896)) (cons "||" (decode-char (quote ucs) 8897)) (cons "->" (decode-char (quote ucs) 8594)) (cons "<-" (decode-char (quote ucs) 8592)) (cons "<=" (decode-char (quote ucs) 8804)) (cons ">=" (decode-char (quote ucs) 8805)) (cons "<>" (decode-char (quote ucs) 8800)) (cons "==" (decode-char (quote ucs) 8801)) (cons "'a" (decode-char (quote ucs) 945)) (cons "'b" (decode-char (quote ucs) 946)) (cons "'c" (decode-char (quote ucs) 947)) (cons "'d" (decode-char (quote ucs) 948)))))) nil [26254 28452]) ("tuareg-font-lock-compose-symbol" function (:arguments ("alist")) nil [28454 29428]) ("tuareg-font-lock-symbols-keywords" function nil nil [29430 29860]) ("unless" code nil nil [29989 31824]) ("tuareg-use-char-classes" variable (:constant-flag t :default-value (string-match "[[:alpha:]]" "x")) nil [32057 32124]) ("tuareg-lower" variable (:constant-flag t :default-value (if tuareg-use-char-classes "[:lower:]" "a-z")) nil [32125 32195]) ("tuareg-alpha" variable (:constant-flag t :default-value (if tuareg-use-char-classes "[:alpha:]" "a-zA-Z")) nil [32196 32269]) ("tuareg-font-lock-syntactic-keywords" variable (:constant-flag t :default-value (quote (("\\<\\('\\)\\([^'\\
]\\|\\\\.[^\\'
 \")]*\\)\\('\\)" (1 (quote (7))) (3 (quote (7))))))) nil [32271 32588]) ("tuareg-font-lock-syntactic-face-function" function (:arguments ("state")) nil [32590 32937]) ("when" code nil nil [32939 33185]) ("when" code nil nil [33186 33442]) ("tuareg-font-lock-keywords" variable nil nil [33498 33577]) ("when" code nil nil [33579 34538]) ("tuareg-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "|" (quote tuareg-electric)) (define-key map ")" (quote tuareg-electric-rp)) (define-key map "}" (quote tuareg-electric-rc)) (define-key map "]" (quote tuareg-electric-rb)) (define-key map "\361" (quote tuareg-indent-phrase)) (define-key map "" (quote tuareg-indent-phrase)) (define-key map "\234" (quote indent-region)) (define-key map "" (quote tuareg-find-alternate-file)) (define-key map "" (quote compile)) (define-key map "nd" (quote tuareg-narrow-to-phrase)) (define-key map "\230" (quote tuareg-eval-phrase)) (define-key map "" (quote tuareg-eval-phrase)) (define-key map "" (quote tuareg-eval-phrase)) (define-key map "" (quote tuareg-eval-region)) (define-key map "" (quote tuareg-eval-buffer)) (define-key map "" (quote tuareg-run-caml)) (define-key map "	" (quote tuareg-interrupt-caml)) (define-key map "" (quote tuareg-kill-caml)) (define-key map "" (quote tuareg-next-phrase)) (define-key map "" (quote tuareg-previous-phrase)) (define-key map [(control c) (home)] (quote tuareg-move-inside-block-opening)) (define-key map [(control c) (control down)] (quote tuareg-next-phrase)) (define-key map [(control c) (control up)] (quote tuareg-previous-phrase)) (define-key map [(meta control down)] (quote tuareg-next-phrase)) (define-key map [(meta control up)] (quote tuareg-previous-phrase)) (define-key map [(meta control h)] (quote tuareg-mark-phrase)) (define-key map "`" (quote tuareg-interactive-next-error-source)) (define-key map "?" (quote tuareg-interactive-next-error-source)) (define-key map ".c" (quote tuareg-insert-class-form)) (define-key map ".b" (quote tuareg-insert-begin-form)) (define-key map ".f" (quote tuareg-insert-for-form)) (define-key map ".w" (quote tuareg-insert-while-form)) (define-key map ".i" (quote tuareg-insert-if-form)) (define-key map ".l" (quote tuareg-insert-let-form)) (define-key map ".m" (quote tuareg-insert-match-form)) (define-key map ".t" (quote tuareg-insert-try-form)) (when tuareg-with-caml-mode-p (define-key map [3 20] (quote caml-types-show-type)) (define-key map [(control mouse-2)] (quote caml-types-mouse-ignore)) (define-key map [(control down-mouse-2)] (quote caml-types-explore)) (define-key map [3 105] (quote ocaml-add-path)) (define-key map [3 91] (quote ocaml-open-module)) (define-key map [3 93] (quote ocaml-close-module)) (define-key map [3 104] (quote caml-help)) (define-key map [3 9] (quote caml-complete))) map)) nil [34666 37360]) ("tuareg-mode-syntax-table" variable (:default-value (let ((st (make-syntax-table))) (modify-syntax-entry 95 "_" st) (modify-syntax-entry 63 ". p" st) (modify-syntax-entry 126 ". p" st) (modify-syntax-entry 58 "." st) (modify-syntax-entry 39 "w" st) (modify-syntax-entry 96 (if tuareg-support-camllight "\"" ".") st) (modify-syntax-entry 34 "\"" st) (modify-syntax-entry 92 "\\" st) (modify-syntax-entry 42 ". 23" st) (condition-case nil (progn (modify-syntax-entry 40 "()1n" st) (modify-syntax-entry 41 ")(4n" st)) (error (modify-syntax-entry 40 "()1" st) (modify-syntax-entry 41 ")(4" st))) st)) nil [37364 38264]) ("tuareg-font-lock-syntax" variable (:constant-flag t :default-value (\` ((95 . "w") (96 . ".") (\,@ (unless tuareg-use-syntax-ppss (quote ((34 . ".") (40 . ".") (41 . ".") (42 . ".")))))))) nil [38266 38450]) ("tuareg-mode-abbrev-table" variable nil nil [38452 38535]) ("tuareg-define-abbrev" function (:arguments ("keyword")) nil [38536 38653]) ("if" code nil nil [38654 39046]) ("tuareg-mode" function (:user-visible-flag t) nil [39272 44176]) ("tuareg-install-font-lock" function (:arguments ("&optional" "no-sym-lock")) nil [44178 48138]) ("compile" include nil nil [48271 48289]) ("tuareg-error-regexp" variable (:constant-flag t :default-value "^[^ -@]+ \"\\([^\"
]+\\)\", [^ -@]+ \\([0-9]+\\)[-,:]") nil [48463 48627]) ("if" code nil nil [48629 48901]) ("tuareg-error-chars-regexp" variable (:constant-flag t :default-value ".*, .*, [^ -@]+ \\([0-9]+\\)-\\([0-9]+\\):") nil [48943 49106]) ("next-error" function (:arguments ("after" "tuareg-next-error" "activate")) nil [49282 50089]) ("tuareg-interactive-error-regexp" variable (:default-value (concat "\\(\\(" "Toplevel input:" "\\|Entr.e interactive:" "\\|Characters [0-9-]*:" "\\|The global value [^ ]* is referenced before being defined." "\\|La valeur globale [^ ]* est utilis.e avant d'.tre d.finie." "\\|Reference to undefined global" "\\|The C primitive \"[^\"]*\" is not available." "\\|La primitive C \"[^\"]*\" est inconnue." "\\|Cannot find \\(the compiled interface \\)?file" "\\|L'interface compil.e [^ ]* est introuvable." "\\|Le fichier [^ ]* est introuvable." "\\|Exception non rattrap.e:" "\\|Uncaught exception:" "\\)[^#]*\\)")) nil [50091 50798]) ("tuareg-keyword-regexp" variable (:constant-flag t :default-value "\\<\\(object\\|initializer\\|and\\|c\\(onstraint\\|lass\\)\\|m\\(atch\\|odule\\|ethod\\|utable\\)\\|s\\(ig\\|truct\\)\\|begin\\|e\\(lse\\|x\\(ception\\|ternal\\)\\)\\|t\\(o\\|hen\\|ry\\|ype\\)\\|v\\(irtual\\|al\\)\\|w\\(h\\(ile\\|en\\)\\|ith\\)\\|i\\(f\\|n\\(herit\\)?\\)\\|f\\(or\\|un\\(ct\\(or\\|ion\\)\\)?\\)\\|let\\|do\\(wnto\\)?\\|parser?\\|rule\\|of\\)\\>\\|->\\|[;,|]") nil [50932 51381]) ("tuareg-match-|-keyword-regexp" variable (:constant-flag t :default-value "\\<\\(and\\|fun\\(ction\\)?\\|type\\|with\\|parser?\\)\\>\\|[[({|=]") nil [51383 51542]) ("tuareg-operator-regexp" variable (:constant-flag t :default-value "[---+*/=<>@^&|]\\|:>\\|::\\|\\<\\(or\\|l\\(and\\|x?or\\|s[lr]\\)\\|as[lr]\\|mod\\)\\>") nil [51544 51695]) ("tuareg-kwop-regexp" variable (:constant-flag t :default-value (concat tuareg-keyword-regexp "\\|=")) nil [51697 51864]) ("tuareg-matching-keyword-regexp" variable (:constant-flag t :default-value "\\<\\(and\\|do\\(ne\\)?\\|e\\(lse\\|nd\\)\\|in\\|then\\|\\(down\\)?to\\)\\>\\|>\\.") nil [51866 52063]) ("tuareg-leading-kwop-regexp" variable (:constant-flag t :default-value (concat tuareg-matching-keyword-regexp "\\|\\<with\\>\\|[|>]?\\]\\|>?}\\|[|)]\\|;;")) nil [52065 52255]) ("tuareg-governing-phrase-regexp" variable (:constant-flag t :default-value "\\<\\(val\\|type\\|m\\(ethod\\|odule\\)\\|c\\(onstraint\\|lass\\)\\|in\\(herit\\|itializer\\)\\|ex\\(ternal\\|ception\\)\\|open\\|let\\|object\\|include\\)\\>") nil [52257 52507]) ("tuareg-governing-phrase-regexp-with-break" variable (:constant-flag t :default-value (concat tuareg-governing-phrase-regexp "\\|;;")) nil [52509 52611]) ("tuareg-keyword-alist" variable (:constant-flag t :default-value (quote (("module" . tuareg-default-indent) ("class" . tuareg-class-indent) ("sig" . tuareg-sig-struct-indent) ("struct" . tuareg-sig-struct-indent) ("method" . tuareg-method-indent) ("object" . tuareg-begin-indent) ("begin" . tuareg-begin-indent) (".<" . tuareg-begin-indent) ("for" . tuareg-for-while-indent) ("while" . tuareg-for-while-indent) ("do" . tuareg-do-indent) ("type" . tuareg-type-indent) ("val" . tuareg-val-indent) ("fun" . tuareg-fun-indent) ("if" . tuareg-if-then-else-indent) ("then" . tuareg-if-then-else-indent) ("else" . tuareg-if-then-else-indent) ("let" . tuareg-let-indent) ("match" . tuareg-match-indent) ("try" . tuareg-try-indent) ("rule" . tuareg-rule-indent) ("function" . tuareg-function-indent) ("with" . tuareg-with-indent) ("parse" . tuareg-parse-indent) ("parser" . tuareg-parser-indent) ("when" . tuareg-default-indent) ("functor" . tuareg-default-indent) ("exception" . tuareg-default-indent) ("inherit" . tuareg-default-indent) ("initializer" . tuareg-default-indent) ("constraint" . tuareg-default-indent) ("virtual" . tuareg-default-indent) ("mutable" . tuareg-default-indent) ("external" . tuareg-default-indent) ("in" . tuareg-in-indent) ("of" . tuareg-default-indent) ("to" . tuareg-default-indent) ("downto" . tuareg-default-indent) (".<" . tuareg-default-indent) ("[" . tuareg-default-indent) ("(" . tuareg-default-indent) ("{" . tuareg-default-indent) ("->" . tuareg-default-indent) ("|" . tuareg-default-indent)))) nil [52613 54448]) ("tuareg-leading-kwop-alist" variable (:constant-flag t :default-value (quote (("|" . tuareg-find-|-match) ("}" . tuareg-find-match) (">}" . tuareg-find-match) (">." . tuareg-find-match) (")" . tuareg-find-match) ("]" . tuareg-find-match) ("|]" . tuareg-find-match) (">]" . tuareg-find-match) ("end" . tuareg-find-match) ("done" . tuareg-find-done-match) ("in" . tuareg-find-in-match) ("with" . tuareg-find-with-match) ("else" . tuareg-find-else-match) ("then" . tuareg-find-match) ("do" . tuareg-find-do-match) ("to" . tuareg-find-match) ("downto" . tuareg-find-match) ("and" . tuareg-find-and-match)))) nil [54450 55162]) ("tuareg-find-meaningful-word" function nil nil [55164 55727]) ("tuareg-find-kwop-regexp" variable (:constant-flag t :default-value (concat tuareg-matching-keyword-regexp "\\|\\<\\(for\\|while\\|do\\|if\\|begin\\|s\\(ig\\|truct\\)\\|object\\)\\>\\|[][(){}]\\|\\*)")) nil [55729 55902]) ("tuareg-make-find-kwop-regexp" function (:arguments ("kwop-regexp")) nil [55904 56007]) ("tuareg-find-kwop" function (:arguments ("kr" "&optional" "do-not-skip-regexp")) nil [56009 57086]) ("tuareg-find-match" function nil nil [57088 57161]) ("tuareg-find-,-match-regexp" variable (:constant-flag t :default-value (tuareg-make-find-kwop-regexp "\\<\\(and\\|match\\|begin\\|else\\|exception\\|then\\|try\\|with\\|or\\|fun\\|function\\|let\\|do\\)\\>\\|->\\|[[{(]")) nil [57163 57355]) ("tuareg-find-,-match" function nil nil [57356 57434]) ("tuareg-find-with-match-regexp" variable (:constant-flag t :default-value (tuareg-make-find-kwop-regexp "\\<\\(match\\|try\\|module\\|begin\\|with\\)\\>\\|[[{(]")) nil [57436 57570]) ("tuareg-find-with-match" function nil nil [57571 57792]) ("tuareg-find-in-match-regexp" variable (:constant-flag t :default-value (tuareg-make-find-kwop-regexp "\\<let\\>")) nil [57794 57877]) ("tuareg-find-in-match" function nil nil [57878 58054]) ("tuareg-find-else-match-regexp" variable (:constant-flag t :default-value (tuareg-make-find-kwop-regexp ";\\|->\\|\\<with\\>")) nil [58056 58151]) ("tuareg-find-else-match" function nil nil [58152 58743]) ("tuareg-find-do-match" function nil nil [58745 58949]) ("tuareg-find-done-match" function nil nil [58951 59113]) ("tuareg-find-and-match-regexp" variable (:constant-flag t :default-value "\\<\\(do\\(ne\\)?\\|e\\(lse\\|nd\\)\\|in\\|then\\|\\(down\\)?to\\)\\>\\|\\<\\(for\\|while\\|do\\|if\\|begin\\|s\\(ig\\|truct\\)\\|class\\)\\>\\|[][(){}]\\|\\*)\\|\\<\\(rule\\|exception\\|let\\|in\\|type\\|val\\|module\\)\\>") nil [59115 59382]) ("tuareg-find-and-match-regexp-dnr" variable (:constant-flag t :default-value (concat tuareg-find-and-match-regexp "\\|\\<and\\>")) nil [59383 59481]) ("tuareg-find-and-match" function (:arguments ("&optional" "do-not-recurse")) nil [59482 60057]) ("tuareg-find-=-match-regexp" variable (:constant-flag t :default-value (tuareg-make-find-kwop-regexp "\\<\\(val\\|let\\|m\\(ethod\\|odule\\)\\|type\\|class\\|when\\|i[fn]\\)\\>\\|=")) nil [60059 60210]) ("tuareg-find-=-match" function nil nil [60211 60593]) ("tuareg-if-when-=" function nil nil [60595 60708]) ("tuareg-captive-=" function nil nil [60710 60853]) ("tuareg-find-|-match-regexp" variable (:constant-flag t :default-value (tuareg-make-find-kwop-regexp "\\<\\(with\\|fun\\(ction\\)?\\|type\\|parser?\\)\\>\\|[=|]")) nil [60855 60989]) ("tuareg-find-|-match" function nil nil [60990 61816]) ("tuareg-find-->-match-regexp" variable (:constant-flag t :default-value (tuareg-make-find-kwop-regexp "\\<\\(external\\|val\\|method\\|let\\|with\\|fun\\(ction\\|ctor\\)?\\|parser\\)\\>\\|[|:;]")) nil [61818 61982]) ("tuareg-find-->-match" function nil nil [61983 62738]) ("tuareg-find-semi-colon-match-regexp" variable (:constant-flag t :default-value (tuareg-make-find-kwop-regexp ";[ 	]*\\((\\*\\|$\\)\\|->\\|\\<\\(let\\|method\\|with\\|try\\|initializer\\)\\>")) nil [62740 62902]) ("tuareg-find-semi-colon-match" function (:arguments ("&optional" "leading-semi-colon")) nil [62903 64770]) ("tuareg-find-phrase-indentation-regexp" variable (:constant-flag t :default-value (tuareg-make-find-kwop-regexp (concat tuareg-governing-phrase-regexp "\\|\\<and\\>"))) nil [64772 64913]) ("tuareg-find-phrase-indentation-regexp-pb" variable (:constant-flag t :default-value (concat tuareg-find-phrase-indentation-regexp "\\|;;")) nil [64914 65022]) ("tuareg-find-phrase-indentation-class-regexp" variable (:constant-flag t :default-value (concat tuareg-matching-keyword-regexp "\\|\\<class\\>")) nil [65023 65136]) ("tuareg-find-phrase-indentation" function (:arguments ("&optional" "phrase-break")) nil [65137 68309]) ("tuareg-back-to-paren-or-indentation-regexp" variable (:constant-flag t :default-value "[][(){}]\\|\\.<\\|>\\.\\|\\*)\\|^[ 	]*\\(.\\|
\\)") nil [68311 68420]) ("tuareg-back-to-paren-or-indentation-in-regexp" variable (:constant-flag t :default-value (concat "\\<in\\>\\|" tuareg-back-to-paren-or-indentation-regexp)) nil [68421 68545]) ("tuareg-back-to-paren-or-indentation-lazy-regexp" variable (:constant-flag t :default-value "[])}]\\|\\.<\\|>\\.\\|\\*)\\|^[ 	]*\\(.\\|
\\)") nil [68546 68657]) ("tuareg-back-to-paren-or-indentation-lazy-in-regexp" variable (:constant-flag t :default-value (concat "\\<in\\>\\|" tuareg-back-to-paren-or-indentation-regexp)) nil [68658 68787]) ("tuareg-back-to-paren-or-indentation" function (:arguments ("&optional" "forward-in")) nil [68788 70398]) ("tuareg-search-forward-paren" function nil nil [70400 70565]) ("tuareg-add-default-indent" function (:arguments ("leading-operator")) nil [70567 70667]) ("tuareg-compute-argument-indent-regexp" variable (:constant-flag t :default-value (tuareg-make-find-kwop-regexp tuareg-kwop-regexp)) nil [70669 70769]) ("tuareg-compute-argument-indent" function (:arguments ("leading-operator")) nil [70770 72407]) ("tuareg-indent-from-paren" function (:arguments ("&optional" "leading-operator")) nil [72409 72789]) ("tuareg-compute-normal-indent-regexp" variable (:constant-flag t :default-value (concat tuareg-compute-argument-indent-regexp "\\|^.[ 	]*")) nil [72791 72900]) ("tuareg-compute-normal-indent" function nil nil [72901 78881]) ("tuareg-looking-at-expression-let" function nil nil [78883 79280]) ("tuareg-looking-at-false-module" function nil nil [79282 79420]) ("tuareg-looking-at-false-sig-struct" function nil nil [79422 79539]) ("tuareg-looking-at-false-type" function nil nil [79541 79688]) ("tuareg-looking-at-in-let" function nil nil [79690 79789]) ("tuareg-find-module-regexp" variable (:constant-flag t :default-value (tuareg-make-find-kwop-regexp "\\<module\\>")) nil [79791 79875]) ("tuareg-find-module" function nil nil [79876 79952]) ("tuareg-modify-syntax" function nil nil [79954 80137]) ("tuareg-restore-syntax" function nil nil [80139 80322]) ("tuareg-indent-command" function (:user-visible-flag t :arguments ("&optional" "from-leading-star")) nil [80324 80808]) ("tuareg-compute-indent" function nil nil [80810 85014]) ("tuareg-split-string" function nil nil [85016 85173]) ("newline-and-indent" function (:arguments ("around" "tuareg-newline-and-indent" "activate")) nil [85175 85610]) ("tuareg-electric" function (:user-visible-flag t) nil [85612 86151]) ("tuareg-electric-rp" function (:user-visible-flag t) nil [86153 86652]) ("tuareg-electric-rc" function (:user-visible-flag t) nil [86654 87640]) ("tuareg-electric-rb" function (:user-visible-flag t) nil [87642 88781]) ("tuareg-abbrev-hook" function nil nil [88783 89226]) ("tuareg-skip-to-end-of-phrase" function nil nil [89228 89546]) ("tuareg-skip-blank-and-comments" function nil nil [89548 89739]) ("tuareg-skip-back-blank-and-comments" function nil nil [89741 90027]) ("tuareg-beginning-phrase-regexp" variable (:constant-flag t :default-value "^#[ 	]*[a-z][_a-z]*\\>\\|\\<\\(end\\|type\\|module\\|sig\\|struct\\|class\\|exception\\|open\\|let\\)\\>\\|;;") nil [90029 90231]) ("tuareg-find-phrase-beginning" function nil nil [90232 91260]) ("tuareg-search-forward-end-iter" function (:arguments ("begin" "current")) nil [91262 92166]) ("tuareg-search-forward-end" function nil nil [92168 92250]) ("tuareg-inside-block-opening" variable (:constant-flag t :default-value "\\<\\(struct\\|sig\\|object\\)\\>") nil [92252 92326]) ("tuareg-inside-block-opening-full" variable (:constant-flag t :default-value (concat tuareg-inside-block-opening "\\|\\<\\(module\\|class\\)\\>")) nil [92327 92441]) ("tuareg-inside-block-regexp" variable (:constant-flag t :default-value (concat tuareg-matching-keyword-regexp "\\|" tuareg-inside-block-opening)) nil [92442 92555]) ("tuareg-inside-block-find-kwop" function nil nil [92556 92957]) ("tuareg-inside-block-p" function nil nil [92959 94657]) ("tuareg-move-inside-block-opening" function (:user-visible-flag t) nil [94659 95053]) ("tuareg-discover-phrase" function (:arguments ("&optional" "quiet")) nil [95055 96579]) ("tuareg-mark-phrase" function (:user-visible-flag t) nil [96581 96840]) ("tuareg-next-phrase" function (:user-visible-flag t :arguments ("&optional" "quiet")) nil [96842 97178]) ("tuareg-previous-phrase" function (:user-visible-flag t) nil [97180 97361]) ("tuareg-indent-phrase" function (:user-visible-flag t) nil [97363 98910]) ("tuareg-find-alternate-file" function (:user-visible-flag t) nil [98912 99192]) ("tuareg-insert-class-form" function (:user-visible-flag t) nil [99194 99683]) ("tuareg-insert-begin-form" function (:user-visible-flag t) nil [99685 100099]) ("tuareg-insert-for-form" function (:user-visible-flag t) nil [100101 100567]) ("tuareg-insert-while-form" function (:user-visible-flag t) nil [100569 101039]) ("tuareg-insert-if-form" function (:user-visible-flag t) nil [101041 101546]) ("tuareg-insert-match-form" function (:user-visible-flag t) nil [101548 101995]) ("tuareg-insert-let-form" function (:user-visible-flag t) nil [101997 102455]) ("tuareg-insert-try-form" function (:user-visible-flag t) nil [102457 102899]) ("comint" include nil nil [103082 103099]) ("tuareg-interactive-mode-map" variable (:default-value (let ((map (copy-keymap comint-mode-map))) (define-key map "|" (quote tuareg-electric)) (define-key map ")" (quote tuareg-electric-rp)) (define-key map "}" (quote tuareg-electric-rc)) (define-key map "]" (quote tuareg-electric-rb)) (define-key map "	" (quote tuareg-interrupt-caml)) (define-key map "" (quote tuareg-kill-caml)) (define-key map "`" (quote tuareg-interactive-next-error-toplevel)) (define-key map "?" (quote tuareg-interactive-next-error-toplevel)) (define-key map "" (quote tuareg-interactive-send-input)) (define-key map "
" (quote tuareg-interactive-send-input-or-indent)) (define-key map "\215" (quote tuareg-interactive-send-input-end-of-phrase)) (define-key map [kp-enter] (quote tuareg-interactive-send-input-end-of-phrase)) map)) nil [103101 103892]) ("tuareg-interactive-buffer-name" variable (:constant-flag t :default-value "*caml-toplevel*") nil [103894 103953]) ("tuareg-interactive-toplevel-error-regexp" variable (:constant-flag t :default-value "[ 	]*Characters \\([0-9]+\\)-\\([0-9]+\\):") nil [103955 104127]) ("tuareg-interactive-last-phrase-pos-in-source" variable nil nil [104128 104183]) ("tuareg-interactive-last-phrase-pos-in-toplevel" variable nil nil [104184 104241]) ("tuareg-interactive-filter" function (:arguments ("text")) nil [104243 105876]) ("define-derived-mode" code nil nil [105878 107280]) ("tuareg-run-caml" function (:user-visible-flag t) nil [107282 107515]) ("tuareg-run-process-if-needed" function (:arguments ("&optional" "cmd")) nil [107517 108239]) ("tuareg-args-to-list" function (:arguments ("string")) nil [108241 108661]) ("tuareg-interactive-get-old-input" function nil nil [108663 108953]) ("tuareg-interactive-end-of-phrase" function nil nil [108955 109125]) ("tuareg-interactive-send-input-end-of-phrase" function nil nil [109127 109313]) ("tuareg-interactive-send-warning" variable (:constant-flag t :default-value "Note: toplevel processing requires a terminating `;;'") nil [109315 109415]) ("tuareg-interactive-send-input" function (:user-visible-flag t) nil [109417 109738]) ("tuareg-interactive-send-input-or-indent" function (:user-visible-flag t) nil [109740 110113]) ("tuareg-eval-region" function (:user-visible-flag t :arguments ("start" "end")) nil [110115 111188]) ("tuareg-narrow-to-phrase" function (:user-visible-flag t) nil [111190 111428]) ("tuareg-eval-phrase" function (:user-visible-flag t) nil [111430 111757]) ("tuareg-eval-buffer" function (:user-visible-flag t) nil [111759 111906]) ("tuareg-interactive-next-error-source" function nil nil [111908 112703]) ("tuareg-interactive-next-error-toplevel" function nil nil [112705 113441]) ("tuareg-interrupt-caml" function nil nil [113443 113644]) ("tuareg-kill-caml" function nil nil [113646 113837]) ("tuareg-about" function nil nil [113966 114046]) ("tuareg-help" function nil nil [114047 114118]) ("tuareg-interactive-help" function nil nil [114119 114214]) ("tuareg-definitions-menu-last-buffer" variable nil nil [114216 114264]) ("tuareg-definitions-keymaps" variable nil nil [114265 114304]) ("tuareg-build-menu" function nil nil [114306 117012]) ("easy-menu-define" code nil nil [117014 117840]) ("tuareg-update-definitions-menu" function nil nil [117842 118008]) ("tuareg-with-emacs-update-definitions-menu" function nil nil [118010 118397]) ("tuareg-toggle-option" function (:arguments ("symbol")) nil [118399 118667]) ("tuareg-update-options-menu" function nil nil [118669 119278]) ("tuareg-browse-manual" function (:user-visible-flag t) nil [119426 119629]) ("tuareg-xemacs-w3-manual" function (:arguments ("url")) nil [119631 119732]) ("tuareg-netscape-manual" function (:arguments ("url")) nil [119734 119938]) ("tuareg-mmm-manual" function (:arguments ("url")) nil [119940 120106]) ("tuareg-browse-library" function (:user-visible-flag t) nil [120255 121850]) ("tuareg-library-mode-map" variable (:default-value (let ((map (make-keymap))) (suppress-keymap map) (define-key map [return] (quote tuareg-library-find-file)) (define-key map [mouse-2] (quote tuareg-library-mouse-find-file)) map)) nil [121854 122069]) ("tuareg-library-find-file" function (:user-visible-flag t) nil [122071 122433]) ("tuareg-library-mouse-find-file" function (:user-visible-flag t :arguments ("event")) nil [122435 122664]) ("tuareg-definitions-regexp" variable (:constant-flag t :default-value "\\<\\(and\\|val\\|type\\|module\\|class\\|exception\\|let\\)\\>") nil [122841 122985]) ("tuareg-definitions-bind-skip-regexp" variable (:constant-flag t :default-value (concat "\\<\\(rec\\|type\\|virtual\\)\\>\\|'[" tuareg-alpha "][0-9_'" tuareg-alpha "]*\\|('.*)")) nil [122987 123197]) ("tuareg-definitions-menu" variable (:default-value (list ["Scan..." tuareg-list-definitions t])) nil [123199 123321]) ("make-variable-buffer-local" code nil nil [123322 123375]) ("tuareg-list-definitions" function (:user-visible-flag t) nil [123377 126638]) ("tuareg-goto" function (:arguments ("pos")) nil [126640 126696]) ("tuareg-sort-definitions" function (:arguments ("list")) nil [126698 127098]) ("tuareg-nth" function (:arguments ("n" "list")) nil [127150 127268]) ("tuareg-split-long-list" function (:arguments ("title" "list")) nil [127319 128060]) ("condition-case" code nil nil [128189 128329]) ("tuareg-load-hook" variable nil nil [128331 128476]) ("run-hooks" code nil nil [128478 128507]) ("tuareg" package nil nil [128509 128526]) ("caml" package nil nil [128614 128629]))
    :file "tuareg.el"
    :pointmax 128655
    )
   (semanticdb-table "sym-lock.el"
    :major-mode 'emacs-lisp-mode
    :tags 'nil
    :file "sym-lock.el"
    )
   )
  :file "semantic.cache"
  :semantic-tag-version "2.0pre3"
  :semanticdb-version "2.0pre3"
  )
